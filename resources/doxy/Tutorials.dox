/*!\page Tutorials
 * CPVector::vector is a template class that will wrap an array of Ts. In this widely used notation, ‘T’ stands for any data type, built-in, 
 * or user-defined class. The vector will store the Ts in a contiguous memory area that it will handle for you, and let you access the individual 
 * Ts simply by writing v[0], v[1], and so on, exactly like you would do for a C-style array.\n\n
 * 
 * CPVector::vector is a template class that is a perfect replacement for the good old C-style arrays. 
 * It allows the same natural syntax that is used with plain arrays but offers a series of services that free the C++ programmer from taking 
 * care of the allocated memory and help to operate consistently on the contained objects.\n\n
 * 
 * There are two fundametal things to know before proceding to the tutorials.\n\n
 * 
 * The first step using vector is to include the appropriate header:\n
 * \code
 * #include <CPVector.h>
 * \endcode 
 * 
 * The second thing to know is that vector lives in the namespace CPVector. This means that you have to resolve the names by prepending CPVector:: to them:\n
 * \code
 * CPVector::vector<int> v;    // declares a vector of integers
 * \endcode
 * 
 * Below is a list of tutorials explaining more in depth how to use CPVector:\n\n
 * 
 * -\subpage BasicUsage \n
 * 
 * 		-# \ref Constructing "Constructing vector objects"\n
 *   	-# \ref Resizing 
 * 
 * 
 */

/*!\page BasicUsage Basic CPVector::vector Usage
 *  
 * \subpage Constructing
 * 
 * \code
 * \endcode 
 */

/*!\page Resizing Resizing a CPVector::vector
 * 
 */

/*!\page Constructing Constructing vector objects
 * 
 *
 */